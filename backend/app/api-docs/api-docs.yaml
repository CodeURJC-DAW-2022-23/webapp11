openapi: 3.0.1
info:
  title: 3TechMarket API
  description: "3TechMarket API, fancyyyyyy"
  version: "1.0"
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/user/profile:
    get:
      tags:
      - user-rest-controller
      summary: Get the current user's profile
      operationId: getUser
      responses:
        "200":
          description: User profile retrieved
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
      - user-rest-controller
      summary: Update the current user's profile
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: User profile updated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/products/{id}:
    put:
      tags:
      - product-rest-controller
      summary: Update a product by id
      operationId: updateProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        "200":
          description: Product updated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags:
      - product-rest-controller
      summary: Delete a product by id
      operationId: deleteProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Product deleted
        "404":
          description: Product not found
  /api/wishlist/addProduct/{id}:
    post:
      tags:
      - user-products-rest-controller
      summary: Add a product to the current user's wishlist
      operationId: addProductToWishlist
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Product added to wishlist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "400":
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/user/send-message:
    post:
      tags:
      - user-rest-controller
      summary: Send a message from the current user
      operationId: sendMessage
      parameters:
      - name: message
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Message'
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: Message sent
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/user/send-message/agent/{id}:
    post:
      tags:
      - user-rest-controller
      summary: Send a message from the current agent to the id of the user he is talking
        to
      operationId: sendMessageAgent
      parameters:
      - name: message
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Message'
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: Message sent
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "400":
          description: User not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/user/return-purchase/{purchaseId}:
    post:
      tags:
      - user-rest-controller
      summary: Return a purchase
      operationId: returnPurchase
      parameters:
      - name: purchaseId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Purchase not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "200":
          description: Purchase returned
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/user/checkout:
    post:
      tags:
      - user-rest-controller
      summary: Checkout the current user's shopping cart
      operationId: checkout
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: User checked out
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/reviews/create/{productId}:
    post:
      tags:
      - reviews
      summary: Create a review
      description: Create a review
      operationId: createReview
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        "404":
          description: Product not found
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Review created
          content:
            '*/*':
              schema:
                type: object
  /api/products/add-product:
    post:
      tags:
      - product-rest-controller
      summary: Create a new product
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        "400":
          description: Product not created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
        "201":
          description: Product created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
        "403":
          description: User not authorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
  /api/images/{id}/review-image:
    post:
      tags:
      - image-rest-controller
      summary: Update the review's images (add new images)
      operationId: uploadReviewImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "400":
          description: Review not found
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Review image added
          content:
            '*/*':
              schema:
                type: object
  /api/images/{id}/product-image:
    get:
      tags:
      - image-rest-controller
      summary: Get the product's images
      operationId: getProductImages
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Product images retrieved
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: Product not found
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
      - image-rest-controller
      summary: Update the product's images (add new images)
      operationId: uploadProductImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "400":
          description: Product not found
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Product image added
          content:
            '*/*':
              schema:
                type: object
  /api/images/{id}/main-image:
    get:
      tags:
      - image-rest-controller
      summary: Get the product's main image
      operationId: getProductMainImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Main image retrieved
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: Product not found
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
      - image-rest-controller
      summary: Update the product's main image
      operationId: uploadProductMainImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: Main image updated
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: Product not found
          content:
            '*/*':
              schema:
                type: object
  /api/images/profile-picture:
    get:
      tags:
      - image-rest-controller
      summary: Get the user's profile picture
      operationId: downloadProfilePicture
      responses:
        "400":
          description: User not found
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Profile picture retrieved
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
      - image-rest-controller
      summary: Update the user's profile picture
      operationId: uploadProfilePicture
      requestBody:
        content:
          application/json:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "400":
          description: Please upload a file
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Profile picture updated
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
      - image-rest-controller
      summary: Delete the user's profile picture
      operationId: deleteProfilePicture
      responses:
        "200":
          description: Profile picture deleted
          content:
            '*/*':
              schema:
                type: object
  /api/cart/addProduct/{id}:
    post:
      tags:
      - user-products-rest-controller
      summary: Add a product to the current user's cart
      operationId: addProductToCart
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Product added to cart
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "400":
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/signup:
    post:
      tags:
      - rest-auth-controller
      summary: Signup
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: Signup successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "400":
          description: Email already exists
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/refresh:
    post:
      tags:
      - rest-auth-controller
      summary: Refresh the access token
      operationId: refresh
      parameters:
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      responses:
        "200":
          description: Access token refreshed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/logout:
    post:
      tags:
      - rest-auth-controller
      summary: Logout
      operationId: logout
      responses:
        "200":
          description: Logout successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/login:
    post:
      tags:
      - rest-auth-controller
      summary: Login
      operationId: login
      parameters:
      - name: accessToken
        in: cookie
        required: false
        schema:
          type: string
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: Login successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "400":
          description: Invalid username or password
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/wishlist:
    get:
      tags:
      - user-products-rest-controller
      summary: Get all products in wishlist
      operationId: getWishlistProducts
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: Products retrieved
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProduct'
  /api/user/messages:
    get:
      tags:
      - user-rest-controller
      summary: Get the current user's messages
      operationId: getMessages
      responses:
        "200":
          description: User messages retrieved
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
  /api/user/messages/agent/{id}:
    get:
      tags:
      - user-rest-controller
      summary: Get the current agent's messages that are associated with the id of
        the user he is talking to
      operationId: getAgentMessages
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: User not found
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        "200":
          description: Agent messages retrieved
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
  /api/reviews/{id}:
    get:
      tags:
      - reviews
      summary: Get a review
      description: Get a review
      operationId: getReview
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Review not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Review'
        "200":
          description: Review found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Review'
  /api/reviews/get/{id}:
    get:
      tags:
      - reviews
      summary: Get all reviews of a product
      description: Get all reviews of a product
      operationId: getProductReviews
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        "404":
          description: Product not found
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
  /api/recommendations:
    get:
      tags:
      - user-products-rest-controller
      summary: Get the current user's recommendations
      operationId: getRecommendations
      responses:
        "200":
          description: User recommendations retrieved
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /api/purchase-history:
    get:
      tags:
      - user-products-rest-controller
      summary: Get the current user's purchase history
      operationId: getPurchaseHistory
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          description: User purchase history retrieved
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePurchase'
  /api/products:
    get:
      tags:
      - product-rest-controller
      summary: Get all products
      operationId: getAllProducts
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: Products retrieved
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProduct'
  /api/products/search/{product}:
    get:
      tags:
      - product-rest-controller
      summary: Search products by name
      operationId: searchProducts
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: product
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Products retrieved
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProduct'
  /api/products/info/{id}:
    get:
      tags:
      - product-rest-controller
      summary: Get a product by id
      operationId: getProductById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Product retrieved
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
  /api/images/{imageId}:
    get:
      tags:
      - image-rest-controller
      summary: Get the image by id
      operationId: getImageById
      parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Image not found
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Image retrieved
          content:
            '*/*':
              schema:
                type: object
  /api/cart:
    get:
      tags:
      - user-products-rest-controller
      summary: Get all products in cart
      operationId: getCartProducts
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: Products retrieved
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProduct'
  /api/wishlist/removeProduct/{id}:
    delete:
      tags:
      - user-products-rest-controller
      summary: Remove a product from the current user's wishlist
      operationId: removeProductFromWishlist
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Product removed from wishlist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "400":
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/reviews/delete/{id}:
    delete:
      tags:
      - reviews
      summary: Delete a review
      description: Delete a review
      operationId: deleteProductReview
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Review removed
        "404":
          description: Review not found
  /api/images/d/{id}/review-image:
    delete:
      tags:
      - image-rest-controller
      summary: Delete the review's images
      operationId: deleteReviewImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Review images deleted
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: Review not found
          content:
            '*/*':
              schema:
                type: object
  /api/images/d/{id}/main-image:
    delete:
      tags:
      - image-rest-controller
      summary: Delete the product's main image
      operationId: deleteProductMainImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Main image deleted
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: Product not found
          content:
            '*/*':
              schema:
                type: object
  /api/images/d/{id}/images:
    delete:
      tags:
      - image-rest-controller
      summary: Delete the product's images
      operationId: deleteProductImages
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Product images deleted
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: Product not found
          content:
            '*/*':
              schema:
                type: object
  /api/cart/removeProduct/{id}:
    delete:
      tags:
      - user-products-rest-controller
      summary: Remove a product from the current user's cart
      operationId: removeProductFromCart
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Product removed from cart
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "400":
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
components:
  schemas:
    Image:
      type: object
      properties:
        imageId:
          type: integer
          format: int64
        fileName:
          type: string
    Message:
      type: object
      properties:
        messageId:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        agent:
          $ref: '#/components/schemas/User'
        message:
          type: string
        timestamp:
          type: integer
          format: int64
    Product:
      type: object
      properties:
        productId:
          type: integer
          format: int64
        description:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        productPrice:
          type: number
          format: double
        mainImage:
          $ref: '#/components/schemas/Image'
        tags:
          type: array
          items:
            type: string
        productStock:
          type: integer
          format: int32
        productName:
          type: string
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        id:
          type: integer
          format: int64
        productPrices:
          type: array
          items:
            type: number
            format: double
        tagList:
          type: string
    Review:
      type: object
      properties:
        reviewId:
          type: integer
          format: int64
        reviewTitle:
          type: string
        rating:
          type: integer
          format: int32
        reviewText:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        encodedPassword:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string
        phoneNumber:
          type: string
        address:
          type: string
        postcode:
          type: string
        state:
          type: string
        country:
          type: string
        area:
          type: string
        city:
          type: string
        passwordChangeToken:
          type: integer
          format: int64
        profilePicture:
          $ref: '#/components/schemas/Image'
        wishlist:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        shoppingCart:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        purchasedProducts:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        token:
          type: integer
          format: int64
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
        message:
          type: string
        error:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    PageProduct:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean
    PagePurchase:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Purchase'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    Purchase:
      type: object
      properties:
        purchaseId:
          type: integer
          format: int64
        product:
          $ref: '#/components/schemas/Product'
        timestamp:
          type: string
        address:
          type: string
        user:
          $ref: '#/components/schemas/User'
        paymentMethod:
          type: string
        cancelled:
          type: boolean
